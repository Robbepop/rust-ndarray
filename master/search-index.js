var searchIndex = {};
searchIndex["ndarray"] = {"doc":"The `ndarray` crate provides an N-dimensional container for general elements\nand for numerics.","items":[[3,"Axis","ndarray","An axis index.",null,null],[12,"0","","",0,null],[3,"Axes","","An iterator over the length and stride of each axis of an array.",null,null],[3,"AxisDescription","","Description of the axis, its length and its stride.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[12,"2","","",1,null],[3,"Dim","","Dimension description.",null,null],[3,"Indices","","An iterator over the indexes of an array shape.",null,null],[3,"ShapeError","","An error related to array shape or layout.",null,null],[3,"Si","","A slice, a description of a range of an array axis.",null,null],[12,"0","","",2,null],[12,"1","","",2,null],[12,"2","","",2,null],[3,"InnerIter","","An iterator that traverses over all dimensions but the innermost,\nand yields each inner row.",null,null],[3,"InnerIterMut","","An iterator that traverses over all dimensions but the innermost,\nand yields each inner row (mutable).",null,null],[3,"AxisIter","","An iterator that traverses over an axis and\nand yields each subview.",null,null],[3,"AxisIterMut","","An iterator that traverses over an axis and\nand yields each subview (mutable)",null,null],[3,"AxisChunksIter","","An iterator that traverses over the specified axis\nand yields views of the specified size on this axis.",null,null],[3,"AxisChunksIterMut","","An iterator that traverses over the specified axis\nand yields mutable views of the specified size on this axis.",null,null],[3,"ArrayBase","","An *N*-dimensional array.",null,null],[3,"ViewRepr","","Array view’s representation.",null,null],[3,"Iter","","An iterator over the elements of an array.",null,null],[3,"IterMut","","An iterator over the elements of an array (mutable).",null,null],[3,"IndexedIter","","An iterator over the indexes and elements of an array.",null,null],[3,"IndexedIterMut","","An iterator over the indexes and elements of an array (mutable).",null,null],[3,"Shape","","A contiguous array shape of n dimensions.",null,null],[3,"StrideShape","","An array shape of n dimensions in c-order, f-order or custom strides.",null,null],[4,"ErrorKind","","Error code for an error related to array shape or layout.",null,null],[13,"IncompatibleShape","","incompatible shape",3,null],[13,"IncompatibleLayout","","incompatible memory layout",3,null],[13,"RangeLimited","","the shape does not fit inside type limits",3,null],[13,"OutOfBounds","","out of bounds indexing",3,null],[13,"Unsupported","","aliasing array elements",3,null],[5,"Dim","","Create a new dimension value.",null,null],[5,"indices","","Create an iterator over the array shape `shape`.",null,{"inputs":[{"name":"e"}],"output":{"name":"indices"}}],[5,"indices_of","","Create an iterator over the indices of the passed-in array.",null,{"inputs":[{"name":"arraybase"}],"output":{"name":"indices"}}],[5,"stack","","Stack arrays along the given axis.",null,null],[5,"Ix0","","Create a zero-dimensional index",null,{"inputs":[],"output":{"name":"ix0"}}],[5,"Ix1","","Create a one-dimensional index",null,{"inputs":[{"name":"ix"}],"output":{"name":"ix1"}}],[5,"Ix2","","Create a two-dimensional index",null,{"inputs":[{"name":"ix"},{"name":"ix"}],"output":{"name":"ix2"}}],[5,"Ix3","","Create a three-dimensional index",null,{"inputs":[{"name":"ix"},{"name":"ix"},{"name":"ix"}],"output":{"name":"ix3"}}],[5,"Ix4","","Create a four-dimensional index",null,{"inputs":[{"name":"ix"},{"name":"ix"},{"name":"ix"},{"name":"ix"}],"output":{"name":"ix4"}}],[5,"Ix5","","Create a five-dimensional index",null,{"inputs":[{"name":"ix"},{"name":"ix"},{"name":"ix"},{"name":"ix"},{"name":"ix"}],"output":{"name":"ix5"}}],[5,"Ix6","","Create a six-dimensional index",null,{"inputs":[{"name":"ix"},{"name":"ix"},{"name":"ix"},{"name":"ix"},{"name":"ix"},{"name":"ix"}],"output":{"name":"ix6"}}],[5,"arr0","","Create a zero-dimensional array with the element `x`.",null,{"inputs":[{"name":"a"}],"output":{"name":"array0"}}],[5,"arr1","","Create a one-dimensional array with elements from `xs`.",null,null],[5,"rcarr1","","Create a one-dimensional array with elements from `xs`.",null,null],[5,"aview0","","Create a zero-dimensional array view borrowing `x`.",null,{"inputs":[{"name":"a"}],"output":{"name":"arrayview0"}}],[5,"aview1","","Create a one-dimensional array view with elements borrowing `xs`.",null,null],[5,"aview2","","Create a two-dimensional array view with elements borrowing `xs`.",null,null],[5,"aview_mut1","","Create a one-dimensional read-write array view with elements borrowing `xs`.",null,null],[5,"arr2","","Create a two-dimensional array with elements from `xs`.",null,null],[5,"rcarr2","","Create a two-dimensional array with elements from `xs`.",null,null],[5,"arr3","","Create a three-dimensional array with elements from `xs`.",null,null],[5,"rcarr3","","Create a three-dimensional array with elements from `xs`.",null,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"eq","","",4,null],[11,"from_iter","","",4,{"inputs":[{"name":"i"}],"output":{"name":"arraybase"}}],[11,"hash","","",4,null],[11,"from","","",4,{"inputs":[{"name":"slice"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"slice"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"self"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"serialize","","",5,null],[11,"deserialize","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",4,null],[11,"deserialize","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",5,null],[11,"decode","","",5,{"inputs":[{"name":"e"}],"output":{"name":"result"}}],[11,"encode","","",4,null],[11,"decode","","",4,{"inputs":[{"name":"e"}],"output":{"name":"result"}}],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"_data_slice","","",6,null],[11,"clone_with_ptr","","",6,null],[11,"_data_slice","","",6,null],[11,"cmp","","",0,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"index","","Return the index of the axis.",0,null],[11,"axis","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"zero","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"zero","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"zero","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"zero","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"zero","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"zero","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"zero","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",5,null],[11,"clone","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"default","","",5,{"inputs":[],"output":{"name":"dim"}}],[11,"eq","","",5,null],[11,"fmt","","",5,null],[11,"add","","",5,null],[11,"add_assign","","",5,null],[11,"add_assign","","",5,null],[11,"add","","",5,null],[11,"add_assign","","",5,null],[11,"sub","","",5,null],[11,"sub_assign","","",5,null],[11,"sub_assign","","",5,null],[11,"sub","","",5,null],[11,"sub_assign","","",5,null],[11,"mul","","",5,null],[11,"mul_assign","","",5,null],[11,"mul_assign","","",5,null],[11,"mul","","",5,null],[11,"mul_assign","","",5,null],[11,"ndim","","",5,null],[11,"slice","","",5,null],[11,"slice_mut","","",5,null],[11,"_fastest_varying_stride_order","","",5,null],[11,"into_pattern","","",5,null],[11,"next_for","","",5,null],[11,"ndim","","",5,null],[11,"slice","","",5,null],[11,"slice_mut","","",5,null],[11,"into_pattern","","",5,null],[11,"next_for","","",5,null],[11,"equal","","",5,null],[11,"size","","",5,null],[11,"size_checked","","",5,null],[11,"default_strides","","",5,null],[11,"_fastest_varying_stride_order","","",5,null],[11,"min_stride_axis","","",5,null],[11,"max_stride_axis","","",5,null],[11,"first_index","","",5,null],[11,"stride_offset","","Self is an index, return the stride offset",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"isize"}}],[11,"stride_offset_checked","","Return stride offset for this dimension and index.",5,null],[11,"ndim","","",5,null],[11,"into_pattern","","",5,null],[11,"slice","","",5,null],[11,"slice_mut","","",5,null],[11,"next_for","","",5,null],[11,"equal","","",5,null],[11,"size","","",5,null],[11,"size_checked","","",5,null],[11,"last_elem","","",5,null],[11,"set_last_elem","","",5,null],[11,"default_strides","","",5,null],[11,"fortran_strides","","",5,null],[11,"_fastest_varying_stride_order","","",5,null],[11,"min_stride_axis","","",5,null],[11,"is_contiguous","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"first_index","","",5,null],[11,"stride_offset","","Self is an index, return the stride offset",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"isize"}}],[11,"stride_offset_checked","","Return stride offset for this dimension and index.",5,null],[11,"ndim","","",5,null],[11,"into_pattern","","",5,null],[11,"slice","","",5,null],[11,"slice_mut","","",5,null],[11,"size","","",5,null],[11,"next_for","","",5,null],[11,"stride_offset","","Self is an index, return the stride offset",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"isize"}}],[11,"_fastest_varying_stride_order","","",5,null],[11,"ndim","","",5,null],[11,"into_pattern","","",5,null],[11,"slice","","",5,null],[11,"slice_mut","","",5,null],[11,"ndim","","",5,null],[11,"into_pattern","","",5,null],[11,"slice","","",5,null],[11,"slice_mut","","",5,null],[11,"ndim","","",5,null],[11,"into_pattern","","",5,null],[11,"slice","","",5,null],[11,"slice_mut","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"index_checked","","",5,null],[11,"index_unchecked","","",5,null],[11,"index_checked","","",5,null],[11,"index_unchecked","","",5,null],[11,"index_checked","","",5,null],[11,"index_unchecked","","",5,null],[11,"index_checked","","",5,null],[11,"index_unchecked","","",5,null],[11,"index_checked","","",5,null],[11,"index_unchecked","","",5,null],[11,"index_checked","","",5,null],[11,"index_unchecked","","",5,null],[11,"remove_axis","","",5,null],[11,"remove_axis","","",5,null],[11,"remove_axis","","",5,null],[11,"remove_axis","","",5,null],[11,"remove_axis","","",5,null],[11,"remove_axis","","",5,null],[11,"remove_axis","","",5,null],[11,"fmt","","",7,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"axis","","Return axis",1,null],[11,"len","","Return length",1,null],[11,"stride","","Return stride",1,null],[11,"clone","","",7,null],[11,"next","","",7,null],[11,"size_hint","","",7,null],[11,"next_back","","",7,null],[11,"clone","","",8,null],[11,"next","","",8,null],[11,"size_hint","","",8,null],[11,"clone","","",9,null],[11,"next","","",9,null],[11,"size_hint","","",9,null],[11,"fold","","",9,null],[11,"next_back","","",9,null],[11,"len","","",9,null],[11,"next","","",10,null],[11,"size_hint","","",10,null],[11,"len","","",10,null],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"fold","","",11,null],[11,"next_back","","",11,null],[11,"len","","",11,null],[11,"next","","",12,null],[11,"size_hint","","",12,null],[11,"len","","",12,null],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"len","","",13,null],[11,"next","","",14,null],[11,"size_hint","","",14,null],[11,"len","","",14,null],[11,"split_at","","Split the iterator at index, yielding two disjoint iterators.",15,null],[11,"clone","","",15,null],[11,"next","","",15,null],[11,"size_hint","","",15,null],[11,"next_back","","",15,null],[11,"len","","",15,null],[11,"split_at","","Split the iterator at index, yielding two disjoint iterators.",16,null],[11,"next","","",16,null],[11,"size_hint","","",16,null],[11,"next_back","","",16,null],[11,"len","","",16,null],[11,"next","","",17,null],[11,"size_hint","","",17,null],[11,"next_back","","",17,null],[11,"next","","",18,null],[11,"size_hint","","",18,null],[11,"next_back","","",18,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"hash","","",2,null],[11,"fmt","","",2,null],[11,"from","","",2,{"inputs":[{"name":"range"}],"output":{"name":"si"}}],[11,"from","","",2,{"inputs":[{"name":"rangefrom"}],"output":{"name":"si"}}],[11,"from","","",2,{"inputs":[{"name":"rangeto"}],"output":{"name":"si"}}],[11,"from","","",2,{"inputs":[{"name":"rangefull"}],"output":{"name":"si"}}],[11,"step","","",2,null],[11,"clone","","",2,null],[11,"clone","","",19,null],[11,"kind","","Return the `ErrorKind` of this error.",19,null],[11,"from_kind","","Create a new `ShapeError`",19,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"eq","","",19,null],[11,"description","","",19,null],[11,"fmt","","",19,null],[11,"fmt","","",19,null],[11,"from","","Create a `Shape` from `dimension`, using the default memory layout.",20,{"inputs":[{"name":"d"}],"output":{"name":"shape"}}],[11,"from","","",21,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"into_shape","","",20,null],[11,"f","","",20,null],[11,"set_f","","",20,null],[11,"strides","","",20,null],[11,"size","","Return the size of the shape in number of elements",20,null],[0,"prelude","","ndarray prelude.",null,null],[11,"clone","","",4,null],[11,"from_vec","","Create a one-dimensional array from a vector (no copying needed).",4,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from_iter","","Create a one-dimensional array from an iterable.",4,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"linspace","","Create a one-dimensional array from the inclusive interval\n`[start, end]` with `n` elements. `A` must be a floating point type.",4,{"inputs":[{"name":"a"},{"name":"a"},{"name":"usize"}],"output":{"name":"self"}}],[11,"range","","Create a one-dimensional array from the half-open interval\n`[start, end)` with elements spaced by `step`. `A` must be a floating\npoint type.",4,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"self"}}],[11,"eye","","Create an identity matrix of size `n` (square 2D array).",4,{"inputs":[{"name":"ix"}],"output":{"name":"self"}}],[11,"from_elem","","Create an array with copies of `elem`, shape `shape`.",4,{"inputs":[{"name":"sh"},{"name":"a"}],"output":{"name":"self"}}],[11,"zeros","","Create an array with zeros, shape `shape`.",4,{"inputs":[{"name":"sh"}],"output":{"name":"self"}}],[11,"default","","Create an array with default values, shape `shape`",4,{"inputs":[{"name":"sh"}],"output":{"name":"self"}}],[11,"from_shape_fn","","Create an array with values created by the function `f`.",4,{"inputs":[{"name":"sh"},{"name":"f"}],"output":{"name":"self"}}],[11,"from_shape_vec","","Create an array with the given shape from a vector. (No cloning of\nelements needed.)",4,{"inputs":[{"name":"sh"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_shape_vec_unchecked","","Create an array from a vector and interpret it according to the\nprovided dimensions and strides. (No cloning of elements needed.)",4,{"inputs":[{"name":"sh"},{"name":"vec"}],"output":{"name":"self"}}],[11,"len","","Return the total number of elements in the array.",4,null],[11,"len_of","","Return the length of `axis`.",4,null],[11,"ndim","","Return the number of dimensions (axes) in the array",4,null],[11,"dim","","Return the shape of the array in its “pattern” form,\nan integer in the one-dimensional case, tuple in the n-dimensional cases\nand so on.",4,null],[11,"raw_dim","","Return the shape of the array as it stored in the array.",4,null],[11,"shape","","Return the shape of the array as a slice.",4,null],[11,"strides","","Return the strides of the array as a slice",4,null],[11,"view","","Return a read-only view of the array",4,null],[11,"view_mut","","Return a read-write view of the array",4,null],[11,"to_owned","","Return an uniquely owned copy of the array",4,null],[11,"to_shared","","Return a shared ownership (copy on write) array.",4,null],[11,"into_shared","","Turn the array into a shared ownership (copy on write) array,\nwithout any copying.",4,null],[11,"iter","","Return an iterator of references to the elements of the array.",4,null],[11,"iter_mut","","Return an iterator of mutable references to the elements of the array.",4,null],[11,"indexed_iter","","Return an iterator of indexes and references to the elements of the array.",4,null],[11,"indexed_iter_mut","","Return an iterator of indexes and mutable references to the elements of the array.",4,null],[11,"slice","","Return a sliced array.",4,null],[11,"slice_mut","","Return a sliced read-write view of the array.",4,null],[11,"islice","","Slice the array’s view in place.",4,null],[11,"get","","Return a reference to the element at `index`, or return `None`\nif the index is out of bounds.",4,null],[11,"get_mut","","Return a mutable reference to the element at `index`, or return `None`\nif the index is out of bounds.",4,null],[11,"uget","","Perform *unchecked* array indexing.",4,null],[11,"uget_mut","","Perform *unchecked* array indexing.",4,null],[11,"swap","","Swap elements at indices `index1` and `index2`.",4,null],[11,"subview","","Along `axis`, select the subview `index` and return a\nview with that axis removed.",4,null],[11,"subview_mut","","Along `axis`, select the subview `index` and return a read-write view\nwith the axis removed.",4,null],[11,"isubview","","Collapse dimension `axis` into length one,\nand select the subview of `index` along that axis.",4,null],[11,"into_subview","","Along `axis`, select the subview `index` and return `self`\nwith that axis removed.",4,null],[11,"select","","Along `axis`, select arbitrary subviews corresponding to `indices`\n and and copy them into a new array.",4,null],[11,"inner_iter","","Return an iterator that traverses over all dimensions but the innermost,\nand yields each inner row.",4,null],[11,"inner_iter_mut","","Return an iterator that traverses over all dimensions but the innermost,\nand yields each inner row.",4,null],[11,"outer_iter","","Return an iterator that traverses over the outermost dimension\nand yields each subview.",4,null],[11,"outer_iter_mut","","Return an iterator that traverses over the outermost dimension\nand yields each subview.",4,null],[11,"axis_iter","","Return an iterator that traverses over `axis`\nand yields each subview along it.",4,null],[11,"axis_iter_mut","","Return an iterator that traverses over `axis`\nand yields each mutable subview along it.",4,null],[11,"axis_chunks_iter","","Return an iterator that traverses over `axis` by chunks of `size`,\nyielding non-overlapping views along that axis.",4,null],[11,"axis_chunks_iter_mut","","Return an iterator that traverses over `axis` by chunks of `size`,\nyielding non-overlapping read-write views along that axis.",4,null],[11,"diag","","Return an view of the diagonal elements of the array.",4,null],[11,"diag_mut","","Return a read-write view over the diagonal elements of the array.",4,null],[11,"into_diag","","Return the diagonal as a one-dimensional array.",4,null],[11,"is_standard_layout","","Return `true` if the array data is laid out in contiguous “C order” in\nmemory (where the last index is the most rapidly varying).",4,null],[11,"as_ptr","","Return a pointer to the first element in the array.",4,null],[11,"as_mut_ptr","","Return a mutable pointer to the first element in the array.",4,null],[11,"as_slice","","Return the array’s data as a slice, if it is contiguous and in standard order.\nReturn `None` otherwise.",4,null],[11,"as_slice_mut","","Return the array’s data as a slice, if it is contiguous and in standard order.\nReturn `None` otherwise.",4,null],[11,"as_slice_memory_order","","Return the array’s data as a slice if it is contiguous,\nreturn `None` otherwise.",4,null],[11,"as_slice_memory_order_mut","","Return the array’s data as a slice if it is contiguous,\nreturn `None` otherwise.",4,null],[11,"into_shape","","Transform the array into `shape`; any shape with the same number of\nelements is accepted, but the source array or view must be\ncontiguous, otherwise we cannot rearrange the dimension.",4,null],[11,"reshape","","*Note: Reshape is for `RcArray` only. Use `.into_shape()` for\nother arrays and array views.*",4,null],[11,"broadcast","","Act like a larger size and/or shape array by *broadcasting*\ninto a larger shape, if possible.",4,null],[11,"swap_axes","","Swap axes `ax` and `bx`.",4,null],[11,"reversed_axes","","Transpose the array by reversing axes.",4,null],[11,"t","","Return a transposed view of the array.",4,null],[11,"axes","","Return an iterator over the length and stride of each axis.",4,null],[11,"max_stride_axis","","Return the axis with the greatest stride (by absolute value),\npreferring axes with len &gt; 1.",4,null],[11,"invert_axis","","Reverse the stride of `axis`.",4,null],[11,"merge_axes","","If possible, merge in the axis `take` to `into`.",4,null],[11,"remove_axis","","Remove array axis `axis` and return the result.",4,null],[11,"assign","","Perform an elementwise assigment to `self` from `rhs`.",4,null],[11,"assign_scalar","","Perform an elementwise assigment to `self` from scalar `x`.",4,null],[11,"fill","","Perform an elementwise assigment to `self` from element `x`.",4,null],[11,"zip_mut_with","","Traverse two arrays in unspecified order, in lock step,\ncalling the closure `f` on each element pair.",4,null],[11,"fold","","Traverse the array elements and apply a fold,\nreturning the resulting value.",4,null],[11,"map","","Call `f` by reference on each element and create a new array\nwith the new values.",4,null],[11,"mapv","","Call `f` by **v**alue on each element and create a new array\nwith the new values.",4,null],[11,"mapv_into","","Call `f` by **v**alue on each element, update the array with the new values\nand return it.",4,null],[11,"map_inplace","","Modify the array in place by calling `f` by mutable reference on each element.",4,null],[11,"mapv_inplace","","Modify the array in place by calling `f` by **v**alue on each element.\nThe array is updated with the new values.",4,null],[11,"visit","","Visit each element in the array by calling `f` by reference\non each element.",4,null],[11,"fold_axis","","Fold along an axis.",4,null],[11,"map_axis","","Reduce the values along an axis into just one value, producing a new\narray with one less dimension.",4,null],[11,"into_raw_vec","","Return a vector of the elements in the array, in the way they are\nstored internally.",4,null],[11,"row","","Return an array view of row `index`.",4,null],[11,"row_mut","","Return a mutable array view of row `index`.",4,null],[11,"rows","","Return the number of rows (length of `Axis(0)`) in the two-dimensional array.",4,null],[11,"column","","Return an array view of column `index`.",4,null],[11,"column_mut","","Return a mutable array view of column `index`.",4,null],[11,"cols","","Return the number of columns (length of `Axis(1)`) in the two-dimensional array.",4,null],[11,"is_square","","Return true if the array is square, false otherwise.",4,null],[11,"scalar_sum","","Return the sum of all elements in the array.",4,null],[11,"sum","","Return sum along `axis`.",4,null],[11,"mean","","Return mean along `axis`.",4,null],[11,"all_close","","Return `true` if the arrays&#39; elementwise differences are all within\nthe given absolute tolerance, `false` otherwise.",4,null],[0,"linalg","","Linear algebra.",null,null],[5,"general_mat_mul","ndarray::linalg","General matrix multiplication.",null,{"inputs":[{"name":"a"},{"name":"arraybase"},{"name":"arraybase"},{"name":"a"},{"name":"arraybase"}],"output":null}],[11,"dot","ndarray","Compute the dot product of one-dimensional arrays.",4,null],[11,"dot","","Perform matrix multiplication of rectangular arrays `self` and `rhs`.",4,null],[11,"dot","","",4,null],[11,"dot","","",4,null],[11,"scaled_add","","Perform the operation `self += alpha * rhs` efficiently, where\n`alpha` is a scalar and `rhs` is another array. This operation is\nalso known as `axpy` in BLAS.",4,null],[8,"Dot","ndarray::linalg","Matrix Multiplication",null,null],[16,"Output","","The result of the operation.",22,null],[10,"dot","","",22,null],[11,"add","ndarray","",4,null],[11,"add","","",4,null],[11,"add","","",4,null],[11,"sub","","",4,null],[11,"sub","","",4,null],[11,"sub","","",4,null],[11,"mul","","",4,null],[11,"mul","","",4,null],[11,"mul","","",4,null],[11,"div","","",4,null],[11,"div","","",4,null],[11,"div","","",4,null],[11,"rem","","",4,null],[11,"rem","","",4,null],[11,"rem","","",4,null],[11,"bitand","","",4,null],[11,"bitand","","",4,null],[11,"bitand","","",4,null],[11,"bitor","","",4,null],[11,"bitor","","",4,null],[11,"bitor","","",4,null],[11,"bitxor","","",4,null],[11,"bitxor","","",4,null],[11,"bitxor","","",4,null],[11,"shl","","",4,null],[11,"shl","","",4,null],[11,"shl","","",4,null],[11,"shr","","",4,null],[11,"shr","","",4,null],[11,"shr","","",4,null],[11,"neg","","Perform an elementwise negation of `self` and return the result.",4,null],[11,"not","","Perform an elementwise unary not of `self` and return the result.",4,null],[11,"add_assign","","",4,null],[11,"add_assign","","",4,null],[11,"sub_assign","","",4,null],[11,"sub_assign","","",4,null],[11,"mul_assign","","",4,null],[11,"mul_assign","","",4,null],[11,"div_assign","","",4,null],[11,"div_assign","","",4,null],[11,"rem_assign","","",4,null],[11,"rem_assign","","",4,null],[11,"bitand_assign","","",4,null],[11,"bitand_assign","","",4,null],[11,"bitor_assign","","",4,null],[11,"bitor_assign","","",4,null],[11,"bitxor_assign","","",4,null],[11,"bitxor_assign","","",4,null],[11,"shl_assign","","",4,null],[11,"shl_assign","","",4,null],[11,"shr_assign","","",4,null],[11,"shr_assign","","",4,null],[11,"from_shape","","Create a read-only array view borrowing its data from a slice.",4,null],[11,"from_shape_ptr","","Create an `ArrayView&lt;A, D&gt;` from shape information and a\nraw pointer to the elements.",4,null],[11,"split_at","","Split the array along `axis` and return one view strictly before the\nsplit and one view after the split.",4,null],[11,"into_slice","","Return the array’s data as a slice, if it is contiguous and in standard order.\nReturn `None` otherwise.",4,null],[11,"from_shape","","Create a read-write array view borrowing its data from a slice.",4,null],[11,"from_shape_ptr","","Create an `ArrayViewMut&lt;A, D&gt;` from shape information and a\nraw pointer to the elements.",4,null],[11,"split_at","","Split the array along `axis` and return one mutable view strictly\nbefore the split and one mutable view after the split.",4,null],[11,"into_slice","","Return the array’s data as a slice, if it is contiguous and in standard order.\nReturn `None` otherwise.",4,null],[6,"Ix0","","zero-dimensionial",null,null],[6,"Ix1","","one-dimensional",null,null],[6,"Ix2","","two-dimensional",null,null],[6,"Ix3","","three-dimensional",null,null],[6,"Ix4","","four-dimensional",null,null],[6,"Ix5","","five-dimensional",null,null],[6,"Ix6","","six-dimensional",null,null],[6,"IxDyn","","dynamic-dimensional",null,null],[6,"Array0","","zero-dimensional array",null,null],[6,"Array1","","one-dimensional array",null,null],[6,"Array2","","two-dimensional array",null,null],[6,"Array3","","three-dimensional array",null,null],[6,"Array4","","four-dimensional array",null,null],[6,"Array5","","five-dimensional array",null,null],[6,"Array6","","six-dimensional array",null,null],[6,"ArrayD","","dynamic-dimensional array",null,null],[6,"ArrayView0","","zero-dimensional array view",null,null],[6,"ArrayView1","","one-dimensional array view",null,null],[6,"ArrayView2","","two-dimensional array view",null,null],[6,"ArrayView3","","three-dimensional array view",null,null],[6,"ArrayView4","","four-dimensional array view",null,null],[6,"ArrayView5","","five-dimensional array view",null,null],[6,"ArrayView6","","six-dimensional array view",null,null],[6,"ArrayViewD","","dynamic-dimensional array view",null,null],[6,"ArrayViewMut0","","zero-dimensional read-write array view",null,null],[6,"ArrayViewMut1","","one-dimensional read-write array view",null,null],[6,"ArrayViewMut2","","two-dimensional read-write array view",null,null],[6,"ArrayViewMut3","","three-dimensional read-write array view",null,null],[6,"ArrayViewMut4","","four-dimensional read-write array view",null,null],[6,"ArrayViewMut5","","five-dimensional read-write array view",null,null],[6,"ArrayViewMut6","","six-dimensional read-write array view",null,null],[6,"ArrayViewMutD","","dynamic-dimensional read-write array view",null,null],[6,"RcArray1","","one-dimensional shared ownership array",null,null],[6,"RcArray2","","two-dimensional shared ownership array",null,null],[6,"Ix","","Array index type",null,null],[6,"Ixs","","Array index type (signed)",null,null],[6,"RcArray","","An array where the data has shared ownership and is copy on write.\nIt can act as both an owner as the data as well as a shared reference (view\nlike).",null,null],[6,"Array","","An array that owns its data uniquely.",null,null],[6,"OwnedArray","","Array where the data is owned uniquely.",null,null],[6,"ArrayView","","A lightweight array view.",null,null],[6,"ArrayViewMut","","A lightweight read-write array view.",null,null],[17,"S","","Slice value for the full range of an axis.",null,null],[8,"Dimension","","Array shape and index trait.",null,null],[16,"SliceArg","","`SliceArg` is the type which is used to specify slicing for this\ndimension.",23,null],[16,"Pattern","","Pattern matching friendly form of the dimension value.",23,null],[10,"into_pattern","","Convert the dimension into a pattern matching friendly value.",23,null],[11,"size","","Compute the size of the dimension (number of elements)",23,null],[11,"size_checked","","Compute the size while checking for overflow.",23,null],[11,"as_array_view","","Borrow as a read-only array view.",23,null],[11,"as_array_view_mut","","Borrow as a read-write array view.",23,null],[8,"IntoDimension","","Convert a value into a dimension.",null,null],[16,"Dim","","",24,null],[10,"into_dimension","","",24,null],[8,"RemoveAxis","","Array shape with a next smaller dimension.",null,null],[16,"Smaller","","",25,null],[10,"remove_axis","","",25,null],[8,"NdIndex","","Tuple or fixed size arrays that can be used to index an array.",null,null],[10,"index_unchecked","","",26,null],[8,"AsArray","","Argument conversion into an array view",null,null],[8,"LinalgScalar","","Elements that support linear algebra operations.",null,null],[8,"NdFloat","","Floating-point element types `f32` and `f64`.",null,null],[8,"ShapeBuilder","","A trait for `Shape` and `D where D: Dimension` that allows\ncustomizing the memory layout (strides) of an array shape.",null,null],[16,"Dim","","",27,null],[16,"Strides","","",27,null],[10,"into_shape","","",27,null],[10,"f","","",27,null],[10,"set_f","","",27,null],[10,"strides","","",27,null],[8,"Data","","Array representation trait.",null,null],[16,"Elem","","The array element type.",28,null],[8,"DataMut","","Array representation trait.",null,null],[8,"DataOwned","","Array representation trait.",null,null],[8,"DataShared","","Array representation trait.",null,null],[8,"DataClone","","Array representation trait.",null,null],[8,"FixedInitializer","","Fixed-size array used for array initialization",null,null],[16,"Elem","","",29,null],[10,"as_init_slice","","",29,null],[10,"len","","",29,{"inputs":[],"output":{"name":"usize"}}],[8,"ScalarOperand","","Elements that can be used as direct operands in arithmetic with arrays.",null,null],[11,"clone","","",6,null],[11,"clone","","",10,null],[11,"clone","","",20,null],[11,"fmt","","",20,null],[11,"clone","","",21,null],[11,"fmt","","",21,null],[14,"s","","Slice argument constructor.",null,null],[14,"stack","","Stack arrays along the given axis.",null,null],[11,"into_iter","","",30,null],[11,"into_iter","","",31,null],[11,"into_dimension","","",32,null],[11,"size","","Compute the size of the dimension (number of elements)",23,null],[11,"size_checked","","Compute the size while checking for overflow.",23,null],[11,"as_array_view","","Borrow as a read-only array view.",23,null],[11,"as_array_view_mut","","Borrow as a read-write array view.",23,null],[11,"ndim","","",33,null],[11,"slice","","",33,null],[11,"slice_mut","","",33,null],[11,"into_pattern","","",33,null],[11,"index_checked","","",32,null],[11,"index_unchecked","","",32,null],[11,"index_checked","","",32,null],[11,"index_unchecked","","",32,null]],"paths":[[3,"Axis"],[3,"AxisDescription"],[3,"Si"],[4,"ErrorKind"],[3,"ArrayBase"],[3,"Dim"],[3,"ViewRepr"],[3,"Axes"],[3,"Indices"],[3,"Iter"],[3,"IndexedIter"],[3,"IterMut"],[3,"IndexedIterMut"],[3,"InnerIter"],[3,"InnerIterMut"],[3,"AxisIter"],[3,"AxisIterMut"],[3,"AxisChunksIter"],[3,"AxisChunksIterMut"],[3,"ShapeError"],[3,"Shape"],[3,"StrideShape"],[8,"Dot"],[8,"Dimension"],[8,"IntoDimension"],[8,"RemoveAxis"],[8,"NdIndex"],[8,"ShapeBuilder"],[8,"Data"],[8,"FixedInitializer"],[6,"ArrayView"],[6,"ArrayViewMut"],[6,"Ix"],[6,"IxDyn"]]};
searchIndex["ndarray_rand"] = {"doc":"Constructors for randomized arrays. `rand` integration for `ndarray`.","items":[[3,"F32","ndarray_rand","A wrapper type that allows casting f64 distributions to f32",null,null],[12,"0","","",0,null],[8,"RandomExt","","Constructors for n-dimensional arrays with random elements.",null,null],[10,"random","","Create an array with shape `dim` with elements drawn from\n`distribution`  using the default rng.",1,{"inputs":[{"name":"sh"},{"name":"ids"}],"output":{"name":"arraybase"}}],[10,"random_using","","Create an array with shape `dim` with elements drawn from\n`distribution`, using a specific Rng `rng`.",1,{"inputs":[{"name":"sh"},{"name":"ids"},{"name":"r"}],"output":{"name":"arraybase"}}],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"sample","","",0,null],[11,"ind_sample","","",0,null]],"paths":[[3,"F32"],[8,"RandomExt"]]};
initSearch(searchIndex);
